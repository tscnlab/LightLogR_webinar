{
  "hash": "08fa8c13403aeedad4a7c660c15f2e61",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Open and reproducible analysis of light exposure and visual experience data (Beginner)\"\nauthor: \n  - name: \"Johannes Zauner\"\n    affiliation: \"Technical University of Munich & Max Planck Institute for Biological Cybernetics, Germany\"\n    orcid: \"0000-0003-2171-4566\"\nformat: live-html\nengine: knitr\npage-layout: full\ntoc: true\nnumber-sections: true\ndate: last-modified\nlightbox: true\ncode-tools: true\ncode-link: true\nresources:\n  - data\n  - scripts\nwebr:\n  # render-df: gt-interactive\n  packages:\n    - LightLogR\n    - tidyverse\n    - gt\n  repos:\n    - https://tscnlab.r-universe.dev\n    - https://cloud.r-project.org\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n![](assets/Beginner_Heading.png)\n\n## Preface\n\nWearables are increasingly used in research because they combine personalized, high‑temporal‑resolution measurements with outcomes related to well‑being and health. In sleep research, wrist‑worn actimetry is long established. As circadian factors gain prominence across disciplines, interest in personal light exposure has grown, spurring a variety of new devices, form factors, and sensor technologies. This trend also brings many researchers into settings where data from wearables must be ingested, processed, and analyzed. Beyond circadian science, measurements of light and optical radiation are central to UV‑related research and to questions of ocular health and development.\n\n`LightLogR` is designed to facilitate the principled import, processing, and visualization of such wearable‑derived data. This document offers an accessible entry point to `LightLogR` via a self‑contained analysis script that you can modify to familiarize yourself with the package. Full documentation of `LightLogR`’s features is available on the [documentation page](https://tscnlab.github.io/LightLogR/), including numerous tutorials.\n\nThis document is intended for researchers with no prior experience using `LightLogR`, and assumes general familiarity with the R statistical software, ideally in a data‑science context[^1].\n\n[^1]: If you are new to the R language or want a great introduction to R for data science, we can recommend the free online book [R for Data Science (second edition)](https://r4ds.hadley.nz) by Hadley Wickham, Mine Cetinkaya-Rundel, and Garrett Grolemund.\n\n## How this page works\n\nThis document runs a self‑contained version of R **completely in your browser**[^2]. No setup or installation is required. \n\nTry it for yourself by making a quick visualization of a sample dataset that comes preloaded with the package. It contains six days of data from a participant, with concurrent measurements of environmental light exposure at the university rooftop. You can play with the arguments to see how it changes the output. As soon as as *webR* has finished loading in the background, the **Run Code** button on code cells will become available.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 10\nsample.data.environment |> #sample data\n  gg_days(geom = \"ribbon\", \n          aes_fill = Id, \n          alpha = 0.6, \n          facetting = FALSE\n          ) |> \n  gg_photoperiod(c(47.1, 9)) +\n  coord_cartesian(expand = FALSE)\n```\n:::\n\n\n\n\nYou can execute the same [script](beginner.qmd) in a traditional R environment, but this browser‑based approach has several advantages:\n\n- You can get started in seconds, avoiding configuration differences across machines and getting to the interesting part quickly.\n- Unlike a static tutorial, you can modify code to test the effects of different arguments and functions and receive immediate feedback.\n- Because everything runs locally in your browser, there are no additional server‑side security risks and minimal network‑related slowdowns.\n\nThis approach also comes with a few drawbacks:\n\n- R and all required packages are loaded every time you load the page. If you close the page or navigate elsewhere in the same tab, webR must be re‑initialized and your session state is lost.\n- Certain functions do not behave as they would in a traditional runtime. For example, saving plot images directly to your local machine (e.g., with `ggsave()`) is not supported. If you need these capabilities, run the [script](beginner.qmd) on your local R installation. In most cases, however, you can interact with the code as you would locally. Known cases where webR does not produce the desired output are marked specifically in this script and static images of outputs are displayed.\n- After running a command for more than 30 seconds, each code cell will go into a time out. If that happens on your browser, try reducing the complexity of commands or choose the local installation.\n- Depending on your browser and system settings, functionality or output may differ. Common differences include default fonts and occasional plot background colors. If you encounter an issue, please describe it in detail—along with your system information (hardware, OS, browser)—in the [issues](https://github.com/tscnlab/LightLogR_webinar/issues) section of the GitHub repository. This helps us to improve your experience moving forward.\n\n[^2]: If you want to know more about `webR` and the `Quarto-live` extension that powers this document, you can visit the [documentation page](https://r-wasm.github.io/quarto-live/)\n\n## Installation\n\n`LightLogR` is hosted on [CRAN](https://cran.r-project.org/package=LightLogR), which means it can easily be installed from any R console through the following command:\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\ninstall.packages(\"LightLogR\")\n```\n:::\n\n\n\n\nAfter installation, it becomes available for the current session by loading the package. We also require a number of packages. Most are automatically downloaded with `LightLogR`, but need to be loaded separately. Some might have to be installed separately on your local machine.\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\nlibrary(LightLogR) #load the package\nlibrary(tidyverse) #a package for tidy data science\nlibrary(gt) #a package for great tables\n#the following packages are needed for preview functions:\nlibrary(cowplot)\nlibrary(legendry)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\nlibrary(patchwork)\nlibrary(rlang)\nlibrary(glue)\nlibrary(gtExtras)\n```\n:::\n\n::: {.cell}\n```{webr}\n#| eval: false\n#the next two scripts will be integrated into the next release of LightLogR\n#but have to be loaded separately for now (≤0.9.3)\nsource(\"scripts/overview_plot.R\")\nsource(\"scripts/summary_table.R\")\n\n# set a global theme for the background\ntheme_set(\n    theme(\n      panel.background = element_rect(fill = \"white\", color = NA)\n    )\n)\n```\n:::\n\n::: {.cell autorun='true'}\n```{webr}\n#| include: false\n#| autorun: true\n# set a global theme for the background\ntheme_set(\n    theme(\n      panel.background = element_rect(fill = \"white\", color = NA)\n    )\n)\n```\n:::\n\n\n\n\nThat is all we need to get started.\n\n## Import\n\n### File formats\n\nTo work with `LightLogR`, we need some data from wearables. Below are screenshots from three example formats to highlight the structure and differences. You can enlarge by clicking at them.\n\n::: {layout-ncol=3}\n![ActLumus file structure](assets/File_Actlumus.png)\n\n![Speccy file structure](assets/File_Speccy.png)\n\n![nanoLambda file structure](assets/File_nanoLambda.png)\n:::\n\n### Importing a file\n\nThese files must be loaded into the active session in a *tidy* format—each variable in its own column and each observation in its own row. `LightLogR`’s device‑specific `import` functions take care of this transformation. Each function requires:\n\n- filenames and paths to the wearable export files\n- the time zone in which the data were collected\n- (optional) participant identifiers\n\nWe begin with a dataset bundled with the package, recorded with the `ActLumus` device. The data were collected in *Tübingen, Germany*, so the correct time zone is `Europe/Berlin`.\n\n\n\n\n::: {.cell}\n```{webr}\n#accessing the filepath of the package to reach the sample dataset:\nfilename <- \n  system.file(\"extdata/205_actlumus_Log_1020_20230904101707532.txt.zip\", \n              package = \"LightLogR\")\nfilename\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 2\n#| fig-width: 5\ndataset <- import$ActLumus(filename, tz = \"Europe/Berlin\", manual.id = \"P1\")\n```\n:::\n\n\n\n\nThe import function also provides rich summary information about the dataset—such as the time span covered, sampling intervals, and an overview plot. Most import settings are configurable. To learn more, consult the function documentation online or via `?import`. For a quick visual overview of the data across days, draw a timeline with `gg_days()`.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 12\ndataset |> gg_days()\n```\n:::\n\n\n\n\nWe will go into much more detail about visualizations in the sections below.\n\n### Importing from a different device\n\nEach device exports data in its own format, necessitating device‑specific handling. `LightLogR` includes import wrapper functions for many devices. You can retrieve the list supported by your installed version with the following function:\n\n\n\n\n::: {.cell}\n```{webr}\nsupported_devices()\n```\n:::\n\n\n\n\nWe will now import from two other devices to showcase the differences.\n\n#### Speccy\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 2\n#| fig-width: 5\nfilename <- \"data/Speccy.csv\"\ndataset <- import$Speccy(filename, tz = \"Europe/Berlin\", manual.id = \"P1\")\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 5\ndataset |> gg_days()\n```\n:::\n\n\n\n\n#### nanoLambda\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 2\n#| fig-width: 5\nfilename <- \"data/nanoLambda.csv\"\ndataset <- import$nanoLambda(filename, tz = \"Europe/Berlin\", manual.id = \"P1\")\n```\n:::\n\n\n\n\nIf we try to visualize this dataset as we have done above, we get an error.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 5\ndataset |> gg_day()\n```\n:::\n\n\n\n\nThis is because many `LightLogR` functions default to the melanopic EDI variable[^3]. However, the nanoLambda export does not include this variable. Therefore, we must explicitly specify which variable to display. Let’s inspect the available variables:\n\n[^3] melanopic equivalent daylight-illuminance, CIE S026:2018 \n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> names()\n```\n:::\n\n\n\n\nYou can choose any numeric variable; here, we’ll use `Melanopic_Lux`, which is similar—though not identical—to melanopic EDI. To identify which argument to adjust, consult the [function documentation]:\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\n?gg_day()\n```\n:::\n\n\n\n\nUse the `y.axis` argument to select the variable. Also update the axis title via `y.axis.label`; otherwise the default label will refer to melanopic EDI.\n\nBecause this dataset spans only a short interval of about 9 minutes, we’ll visualize it with `gg_day()`, which uses clock time on the x‑axis. There are a few other differences to `gg_days()`, which we will see in the sections below.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 6\ndataset |> gg_day(y.axis = Melanopic_Lux, y.axis.label = \"melanopic illuminance\")\n```\n:::\n\n\n\n\nIn summary, importing from different devices is typically as simple as specifying the device name. Some devices require additional arguments; consult the `?import` help for details.\n\n### Importing more than one file\n\nIn typical studies, you’ll work with multiple participants, and importing each file individually is cumbersome. `LightLogR` supports batch imports; simply pass multiple files to the import function. In this tutorial, we’ll use three files from three participants, all drawn from the open‑access personal light‑exposure dataset by [Guidolin et al. 2025](https://github.com/MeLiDosProject/GuidolinEtAl_Dataset_2025)[^4]. All data were collected with the `ActLumus` device type.\n\n[^4]: Guidolin, C., Zauner, J., & Spitschan, M., (2025). Personal light exposure dataset for Tuebingen, Germany (Version 1.0.0) [Data set]. URL: https://github.com/MeLiDosProject/GuidolinEtAl_Dataset_2025. DOI: doi.org/10.5281/zenodo.16895188\n\nWhen importing multiple files, keep the following in mind:\n\n- All files must originate from the same device type, share the same export structure, and use the same time‑zone specification. If they differ, import them separately.\n- Be deliberate about participant‑ID assignment. The `manual.id` argument used above would assign the same ID to all imported data in a batch. If a file contains a column specifying the `Id`, you can point to that column; more often, the identifier is encoded in the filename. If you omit ID arguments, the filename is used as `Id` by default. Because filenames are often verbose, you will typically extract only the participant code. In our three example files, the relevant IDs are `216`, `218`, and `219`.\n\n\n\n\n::: {.cell}\n```{webr}\nfilenames <- list.files(\"data\", pattern = \"actlumus\", full.names = TRUE)\nfilenames\n```\n:::\n\n\n\n\nIf filenames follow a consistent pattern, you can instruct the import function to extract only the participant code from each name. In our case, the first three digits encode the ID. We can specify this with a regular expression: `^(\\d{3})`. This pattern matches the first three digits at the start of the filename and captures them (`^` = start of string, `\\d` = digit, `{3}` = exactly three, `(`& `)` = encloses the part of the pattern we actually want). If you’re not familiar with regular expressions, they can look like a jumble of ASCII characters, but they succinctly express patterns. Large language models are quite good at proposing regexes and explaining their components, so consider prompting one when you need a new pattern. With that, we can import our files.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 5\npattern <- \"^(\\\\d{3})\"\ndataset <- import$ActLumus(filenames, tz = \"Europe/Berlin\", auto.id = pattern)\n```\n:::\n\n\n\n\nThe overview plot is now more informative: it shows how the datasets align across time and highlights extended gaps due to missing data. We will return to the terminology of `implicit missingness` shortly.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\ndataset |> gg_days()\n```\n:::\n\n\n\n\nDirect plotting highlights the extended gaps in the recordings. We’ll apply a package function that removes days with insufficient coverage to address this. For now, we can ignore the details: any participant‑day with more than 80% missing data will be excluded.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\ndataset_red <-\n  dataset |>\n  remove_partial_data(\n    Variable.colname = MEDI,\n    threshold.missing = 0.8,\n    by.date = TRUE,\n    handle.gaps = TRUE\n  )\n\ndataset_red |> gg_days()\n```\n:::\n\n\n\n\nThat concludes the import section of the tutorial; next, we turn to visualization functions. For simplicitly, we will only carry a small selection of variables forward. That increases the calculation speed of many functions. Feel free to choose a different set of variables.\n\n\n\n\n::: {.cell}\n```{webr}\ndataset <- dataset |> select(Id, Datetime, PIM, TAT, LIGHT, MEDI)\ndataset |> names()\n```\n:::\n\n\n\n\n### How to find the correct time zone name?\n\nA final note on imports: the function accepts only valid [IANA time‑zone](https://www.iana.org/time-zones) identifiers. You can retrieve the full list (with exact spellings) using:\n\n\n\n\n::: {.cell}\n```{webr}\nOlsonNames() |> sample(5)\n```\n:::\n\n\n\n\n## Basic Visualizations\n\nVisualization is central to exploratory data analysis and to communicating results in publications and presentations. `LightLogR` provides a suite of plotting functions built on `ggplot2` and the *Grammar of Graphics*. As a result, the plots are composable, flexible, and straightforward to modify.\n\n### `gg_days()`\n\n`gg_days()` displays a timeline per each `Id`. It constrains the x‑axis to complete days and, by default, uses a line geometry. The function works best for up to a handful of Id's and 1-2 weeks of data at most.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\ndataset_red |> gg_days(aes_col = Id) #try interactive = TRUE\n```\n:::\n\n\n\n\n### `gg_day()`\n\n`gg_day()` complements `gg_days()` by focusing on individual calendar days. By default, it places all observations from a selected day into a single panel, regardless of source. This layout is configurable. For readability, `gg_day()` works best with ~1–4 days of data (at most about a week) to keep plot height manageable.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 10\n#| fig-width: 8\ndataset_red |> \n  gg_day(aes_col = Id, \n         format.day = \"%A\", # switch from dates to week-days\n         size = 0.5, # reduce point size\n         x.axis.breaks = hms::hms(hours = c(0, 12))) + #12-hour grid \n  guides(color = \"none\") + # remove color legend\n  facet_grid(rows = vars(Day.data), cols = vars(Id), switch = \"y\") # Id x Day\n```\n:::\n\n\n\n\n### `gg_overview()`\n\n`gg_overview()` is invoked automatically by the import function but can also be called independently and customized. By default, each `Id` appears as a separate row on the y‑axis. For longitudinal datasets with large gaps between recordings, you can group observations (e.g., by a `session` variable) to distinguish distinct measurement periods (see figure below). The function works nice for many participants and long collection periods, by setting their recording periods in relation. By default, it will also show times of implicitly missing data.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 7\ndataset |> \n  gg_overview(col = Id) + \n  ggsci::scale_color_jco() #nice color palette\n```\n:::\n\n\n\n\n![Grouping the data by `Id` and measurement `session` provides easy overviews for longitudinal datasets](assets/Overview.png){width=\"35%\"}\n\n### `gg_heatmap()`\n\n`gg_heatmap()` renders one calendar day per row within each data‑collection period. It is well‑suited to long monitoring spans and scales effectively to many participants. To highlight patterns that cross midnight, it supports a `doubleplot` option that displays a duplicate of the day, or the next day with an offset.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 10\n#| warning: false\ndataset_red |> gg_heatmap()\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 10\n#| warning: false\n# Looking at 5-minute bins of data\ndataset_red |> gg_heatmap(unit = \"5 mins\")\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 10\n#| warning: false\n#showing data as doubleplots. Time breaks have to be reduced for legibility\ndataset_red |> \n  gg_heatmap(doubleplot = \"next\", \n             time.breaks = c(0, 12, 24, 36, 48)*3600\n             )\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 3\n#| fig-width: 10\n#| warning: false\n# Actogram-style heatmap (<10 lx mel EDI in this case)\ndataset_red |> \n  gg_heatmap(MEDI < 10,\n             doubleplot = \"next\", \n             time.breaks = c(0, 12, 24, 36, 48)*3600,\n             fill.limits = c(0, NA), \n             fill.remove = TRUE, \n             fill.title = \"<10lx mel EDI\"\n             ) +\n  scale_fill_manual(values = c(\"TRUE\" = \"black\", \"FALSE\" = \"#00000000\"))\n```\n:::\n\n\n\n\n### What about non-light variables?\n\n`LightLogR` is optimized for wearable light sensors and selects sensible defaults: for example, melanopic EDI (when available) and settings suited to typical light‑exposure distributions. Nevertheless, the functions are measurement‑agnostic and can be applied to non‑light variables. Consult the function documentation to see which arguments to adjust for your variable of interest. For example, here we plot an activity variable:\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\ndataset_red |> \n  gg_days(\n    y.axis = PIM, #variable PIM\n    y.scale = \"identity\", #set a linear scale\n    y.axis.breaks = waiver(), #choose standard axis breaks according to values\n    y.axis.label = \"Proportional integration mode (PIM)\"\n  ) +\n  coord_cartesian(ylim = c(0, 5000))\n```\n:::\n\n\n\n\n\n## Validation\n\nCurrently, `LightLogR`’s validation aims to ensure a regular, uninterrupted time series for each participant. Additional features are planned.\n\nThe figures below summarize the gap terminology used in `LightLogR` and illustrate how `gap_handler()` fills implicit missing data.\n\n::: {layout-ncol=2}\n![Terminology of gaps in `LightLogR`](assets/gap_terminology.png)\n\n![`gap_handler()` identifies the time series’ `dominant epoch` (the most common sampling interval) and fills `NA` entries between the first and last observation. By default, no observations are dropped, so irregular samples are preserved.](assets/gap_handler.png)\n:::\n\nTo quickly assess whether a dataset contains (implicit) gaps or irregular sampling, use the following diagnostic helpers:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> has_gaps()\ndataset |> has_irregulars()\n```\n:::\n\n\n\n\nWe can then quickly visualize where these issues occur within the affected days.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 12\n#| fig-width: 5\n#| eval: false\ndataset |> gg_gaps(group.by.days = TRUE, show.irregulars = TRUE)\n```\n:::\n\n\n\n\n![To generate this figure yourself, please execute the [static R script](beginner.qmd)](assets/gg_gaps.png){width=\"50%\"}\n\nThis function can be slow when a dataset contains many gaps or irregular samples. If needed, pre‑filter the data or adjust the function’s arguments.\n\nIn our example, we identify eight participant‑days with gaps:\n\n- **Three straightforward cases:** data collection ends around noon on Monday, leaving the remainder of the day missing. By default, the function evaluates complete calendar days (this is configurable). These days only require converting implicit gaps into explicit missing values.\n- **Two pre‑trial snippets:** brief measurements occur on the Friday or Monday preceding the trial—likely test recordings. These days are outside the study window and should be removed entirely.\n- **Three early irregularities:** irregular sampling appears shortly after data collection starts. This most likely reflects a test recording immediately before the device was handed to the participant. Trimming this initial segment eliminates the irregularity and the rest of the day can be changed to explicit missingness.\n\n### Preparing the dataset\n\nThere are several ways to address these issues. We will showcase three in the next sections.\n\n#### 1. Set the maximum length of the dataset.\n\nIf the study follows a fixed‑length protocol, you can enforce a maximum observation window (e.g., 7 days) by trimming from the beginning so that each participant’s series has the same duration. This approach preserves participant‑specific end times, which must meaningfully reflect protocol completion; otherwise, you risk cutting away valid data.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 8\n#| fig-width: 5\n#| warning: false\ndataset |> \nfilter(\n  Datetime > (max(Datetime) - days(7))\n  ) |> \n  gg_gaps(group.by.days = TRUE, show.irregulars = TRUE)\n```\n:::\n\n\n\n\nThe remaining gaps are simple start‑ and end‑day truncations.\n\n#### 2. Remove the first values from the dataset\n\nYou can remove a fixed number of observations from the beginning of each participant’s series. This approach is helpful when the exact total measurement duration is not critical—for example, to discard brief pre‑trial test recordings or initial device‑stabilization periods.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 12\n#| fig-width: 5\n#| warning: false\ndataset |> \n  slice_tail(n = -(3*60*6)) |> \n  gg_gaps(group.by.days = TRUE, show.irregulars = TRUE)\n```\n:::\n\n\n\n\nThe results are similarly effective.\n\n#### 3. Trim with a list\n\nThe most robust way to enforce sensible measurement windows is to supply a table of trial `start` and `end` timestamps (per participant) and filter the time series accordingly. In this tutorial we create that table *on the fly*; in practice, it is typically stored in a CSV or Excel file. The `add_states()` function provides an effective interface between the two datasets: it aligns by identifier and time, adds state information (e.g., “in‑trial”), and enables precise trimming. Ensure that the identifying variables (e.g., `Id`) are named identically across files.\n\n\n\n\n::: {.cell}\n```{webr}\n#create a dataframe of trial times\ntrial_times <-\n  data.frame(\n    Id = c(\"216\", \"218\", \"219\"),\n    start = c(\n      \"02.10.2023  12:30:00\",\n      \"16.10.2023  12:00:00\",\n      \"16.10.2023  12:00:00\"\n    ),\n    end = c(\n      \"09.10.2023  12:30:00\",\n      \"23.10.2023  12:00:00\",\n      \"23.10.2023  12:00:00\"\n    ),\n    trial = TRUE\n  ) |>\n  mutate(across(\n    c(start, end),\n    \\(x) parse_date_time(x, order = \"%d%m%y %H%M%S\", tz = \"Europe/Berlin\")\n  )) |>\n  group_by(Id)\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 12\n#| fig-width: 5\n#| warning: false\n# filter dataset by trial time\ndataset <-\n  dataset |>\n  add_states(trial_times) |>\n  dplyr::filter(trial) |>\n  select(-trial)\n\ndataset |> \n  gg_gaps(group.by.days = TRUE, show.irregulars = TRUE)\n\n```\n:::\n\n\n\n\n### `gap_table()`\n\nWe can summarize each dataset’s regularity and missingness in a table. Note that this function may be slow when many gaps are present.\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\ndataset |> gap_table()\n```\n:::\n\n\n\n\n![To generate this table yourself, please execute the [static R script](beginner.qmd)](assets/gap_table1.png)\n\n### `gap_handler()`\n\nApproximately 13% of the missing data are *implicit*—they arise from truncated start and end days. It is good practice to make these gaps explicit. Use `gap_handler(full.days = TRUE)` to fill implicit gaps to full‑day regularity. Then verify the result with `gap_table()`, the diagnostic helpers, and a follow‑up visualization:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset <- dataset |> gap_handler(full.days = TRUE)\n```\n:::\n\n::: {.cell}\n```{webr}\n#| eval: false\ndataset |> gap_table()\n```\n:::\n\n\n\n\n![To generate this table yourself, please execute the [static R script](beginner.qmd)](assets/gap_table2.png)\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> has_gaps()\ndataset |> has_irregulars()\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n#| warning: false\ndataset |> gg_days(aes_col = Id)\n```\n:::\n\n\n\n\n### `remove_partial_data()`\n\nIt is often necessary to set missingness thresholds at different levels (hour, day, participant). Typical questions include:\n\n- How much data may be missing within an hour before that hour is excluded?\n- How much data may be missing from a day before that day is excluded?\n- How much data may be missing for a participant before excluding them from further analyses?\n\n`remove_partial_data()` addresses these questions. It evaluates each group (by default, `Id`) and quantifies missingness either as an absolute duration or a relative proportion. Groups that exceed the specified threshold are discarded. A useful option is `by.date`, which performs the thresholding per calendar day (for removal) while leaving the output grouping unchanged. Note that missingness is determined by the amount of data points in each group, relative to NA values.\n\nFor this tutorial, we will remove any day with more than one hour of missing data—this effectively drops both partial Mondays:\n\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n#| warning: false\ndataset <- \n  dataset |> \n  remove_partial_data(Variable.colname = MEDI, \n                      threshold.missing = \"1 hour\",\n                      by.date = TRUE)\n\ndataset |> gg_days(aes_col = Id)\n```\n:::\n\n\n\n\n::: {.callout-note}\n## Why did we just spend all this time handling gaps and irregularities on the Mondays only to remove them afterward?\n\nNot all datasets are this straightforward. Deciding whether a day should be included in the analysis should come **after** ensuring the data are aligned to a regular, uninterrupted time series. Regularization makes diagnostics meaningful and prevents threshold rules from behaving unpredictably.\n\nMoreover, there are different frameworks for grouping personal light‑exposure data. In this tutorial we focus on calendar dates and 24‑hour days. Other frameworks group differently. For example, anchoring to sleep–wake cycles—under which both Mondays might still contain useful nocturnal data. Harmonizing first ensures those alternatives remain viable even if calendar‑day summaries are later excluded.\n\n:::\n\n## Metrics\n\nMetrics form the second major pillar of `LightLogR`, alongside visualization. The literature contains many light‑exposure metrics; `LightLogR` implements a broad set of them behind a uniform, well‑documented interface. The currently available metrics are:\n\n| Metric Family                        | Submetrics | Note                 | Documentation                                                                                     |\n|------------------|----------------|-----------------|---------------------|\n| Barroso                              | 7                 |                      | `barroso_lighting_metrics()`                                                                      |\n| Bright-dark period                   | 4x2               | bright / dark        | `bright_dark_period()`                                                                            |\n| Centroid of light exposure           | 1                 |                      | `centroidLE()`                                                                                    |\n| Dose                                 | 1                 |                      | `dose()`                                                                               |\n| Disparity index                      | 1                 |                      | `disparity_index()`                                                                               |\n| Duration above threshold             | 3                 | above, below, within | `duration_above_threshold()`                                                                      |\n| Exponential moving average (EMA)     | 1                 |                      | `exponential_moving_average()`                                                                    |\n| Frequency crossing threshold         | 1                 |                      | `frequency_crossing_threshold()`                                                                  |\n| Intradaily Variance (IV)             | 1                 |                      | `intradaily_variability()`                                                                        |\n| Interdaily Stability (IS)            | 1                 |                      | `interdaily_stability()`                                                                          |\n| Midpoint CE (Cumulative Exposure)    | 1                 |                      | `midpointCE()`                                                                                    |\n| nvRC (Non-visual circadian response) | 4                 |                      | `nvRC()`, `nvRC_circadianDisturbance()`, `nvRC_circadianBias()`, `nvRC_relativeAmplitudeError()` |\n| nvRD (Non-visual direct response)    | 2                 |                      | `nvRD()`, `nvRD_cumulative_response()`                                                           |\n| Period above threshold               | 3                 | above, below, within | `period_above_threshold()`                                                                        |\n| Pulses above threshold               | 7x3               | above, below, within | `pulses_above_threshold()`                                                                        |\n| Threshold for duration               | 2                 | above, below         | `threshold_for_duration()`                                                                        |\n| Timing above threshold               | 3                 | above, below, within | `timing_above_threshold()`                                                                        |\n| **Total:**                           |                   |                      |                                                                                                   |\n| **17 families**                      | **62 metrics**    |                      |                                                                                                   |\n\n::: {.callout-tip}\n\nLightLogR supports a wide range of metrics across different metric families. You can find the full documentation of metrics functions in the [reference section](https://tscnlab.github.io/LightLogR/reference/index.html#metrics). There is also an overview article on how to use [Metrics](https://tscnlab.github.io/LightLogR/articles/Metrics.html).\n\nIf you would like to use a metric you don't find represented in LightLogR, please contact the developers. The easiest and most trackable way to get in contact is by opening a new issue on our [Github repository](https://github.com/tscnlab/LightLogR/issues).\n\n:::\n\n### Principles\n\nEach metric function operates on vectors. Although the main argument is often named `Light.vector`, the name is conventional - the function will accept any variable you supply. All metric functions are thoroughly documented, with references to their intended use and interpretation.\n\nWhile we don’t generally recommend it, you can pass a raw vector directly to a metric function. For example, to compute *Time above 250 lx melanopic EDI*, you could run:\n\n\n\n\n::: {.cell}\n```{webr}\nduration_above_threshold(\n  Light.vector = dataset$MEDI,\n  Time.vector = dataset$Datetime,\n  threshold = 250\n)\n```\n:::\n\n\n\n\nHowever, that single result is not very informative - it aggregates across all participants and all days. To recover the total recorded duration, recompute the complementary metric: *Time below 250 lx melanopic EDI*. This should approximate the full two weeks and four days of data when evaluated over the whole dataset:\n\n\n\n\n::: {.cell}\n```{webr}\nduration_above_threshold(\n  Light.vector = dataset$MEDI,\n  Time.vector = dataset$Datetime,\n  threshold = 250,\n  comparison = \"below\"\n)\n```\n:::\n\n\n\n\nThe problem is amplified for metrics defined at the day scale (or shorter). For example, the *brightest 10 hours* (**M10**) is computed within each 24‑hour day using a consecutive 10‑hour window—so applying it to a pooled, cross‑day vector is almost meaningless:\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\nbright_dark_period(\n  Light.vector = dataset$MEDI,\n  Time.vector = dataset$Datetime\n)\n```\n:::\n\n\n\n\nThe resulting value - although computationally valid - is substantively meaningless: it selects the single brightest 10‑hour window **across all participants**, rather than computing M10 *per participant per day*. In addition, two time series (218 & 219) overlap in time, which violates the assumption of a single, regularly spaced series and can produce errors. Hence the `Warning: Time.vector is not regularly spaced. Calculated results may be incorrect!` \n\nAccordingly, metric functions should be applied within tidy groups (e.g., by `Id` and by calendar `Date`), not to a pooled vector. You can achieve this with explicit for‑loops or, preferably, a tidy approach using `dplyr` (e.g., `group_by()`/`summarise()` or `nest()`/`map()`). We recommend the latter.\n\n### Use of `summarize()`\n\nWrap the metric inside a dplyr `summarise()`/`summarize()` call, supply the **grouped** dataset, and set `as.df = TRUE`. This yields a tidy, one‑row‑per‑group result (e.g., per `Id`). For example, computing **interdaily stability (IS)**:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  summarize(\n    interdaily_stability(\n      Light.vector = MEDI,\n      Datetime.vector = Datetime,\n      as.df = TRUE\n    )\n  )\n```\n:::\n\n\n\n\nTo compute multiple metrics at once, include additional expressions inside the `summarize()` call. For instance, add **Time above 250 lx melanopic EDI** alongside IS:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  summarize(\n     duration_above_threshold(\n      Light.vector = MEDI,\n      Time.vector = Datetime,\n      threshold = 250,\n      as.df = TRUE\n    ),\n    interdaily_stability(\n      Light.vector = MEDI,\n      Datetime.vector = Datetime,\n      as.df = TRUE\n    )\n  )\n```\n:::\n\n\n\n\nFor finer granularity, add additional grouping variables before summarizing—for example, group by calendar `Date` to compute metrics per participant–day:\n\n\n\n\n::: {.cell}\n```{webr}\nTAT250 <- \ndataset |> \n  add_Date_col(group.by = TRUE, as.wday = TRUE) |> #add a Date column + group\n    summarize(\n     duration_above_threshold(\n      Light.vector = MEDI,\n      Time.vector = Datetime,\n      threshold = 250,\n      as.df = TRUE\n    ),\n    .groups = \"drop_last\"\n  )\n\nTAT250\n```\n:::\n\n\n\n\nWe can further condense this:\n\n\n\n\n::: {.cell}\n```{webr}\nTAT250 |> \n  summarize_numeric()\n```\n:::\n\n\n\n\nThat’s all you need to get started with metric calculation in `LightLogR`. While advanced metrics involve additional considerations, this tidy grouped workflow will take you a long way.\n\n## Photoperiod\n\nPhotoperiod is a key covariate in many analyses of personal light exposure. `LightLogR` includes utilities to derive photoperiod information with minimal effort. All you need are geographic coordinates in decimal degrees (latitude, longitude); functions will align photoperiod features to your time series. Provide coordinates in standard decimal format (e.g., `48.52, 9.06`):\n\n\n\n\n::: {.cell}\n```{webr}\n#specifying coordinates (latitude/longitude)\ncoordinates <- c(48.521637, 9.057645)\n\n#extracting photoperiod information\ndataset |> extract_photoperiod(coordinates)\n```\n:::\n\n::: {.cell}\n```{webr}\n#adding photoperiod information\ndataset <- \n  dataset |> \n  add_photoperiod(coordinates)\n\ndataset |> head()\n```\n:::\n\n\n\n\n### Photoperiod in visualizations\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n#if photoperiod information was already added to the data\n#nothing has to be specified\ndataset |> gg_days() |> gg_photoperiod()\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n#if no photoperiod information is available in the data, coordinates have to\n#be specified\ndataset_red |> gg_days() |> gg_photoperiod(coordinates)\n```\n:::\n\n\n\n\n### Data\n\nPhotoperiod features make it easy to split data into day and night states—for example, to compute metrics by phase. The `number_states()` function places a counter each time the state changes, effectively numbering successive day and night episodes. Grouping by these counters then allows you to calculate metrics for individual days and nights:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  #create numbered days and nights:\n  number_states(photoperiod.state) |> \n  #group by Id, day and nights, and also the numbers:\n  group_by(photoperiod.state, photoperiod.state.count, .add = TRUE) |> \n  #calculate the brightest hour in each day and each night:\n  summarize(\n    duration_above_threshold(MEDI, Datetime, threshold = 250, as.df = TRUE),\n    .groups = \"drop_last\") |> \n  #condense the instances to a single summary\n  summarize_numeric(prefix = \"\")\n```\n:::\n\n\n\n\nThis yields the average brightest 1‑hour period for each participant, separately for day and night. Notably, the participant with the highest daytime brightness also shows the lowest nighttime brightness, and vice versa.\n\n## Distribution of light exposure\n\nPersonal light‑exposure data exhibit a characteristic distribution (see figure): they are strongly right‑skewed—approximately log‑normal—and contain many zeros (i.e., zero‑inflation).\n\n![Distribution of light exposure in the environment and for a participant, both at night and day](assets/Distribution.png)\n\nConsequently, the arithmetic mean is not a representative summary for these data. We can visualize this by placing common location metrics on the distribution.\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  ungroup() |> \n  summarize(\n    mean = mean(MEDI),\n    median = median(MEDI),\n    geo_mean = exp(mean(log(MEDI[MEDI > 0]), na.rm = TRUE))\n  )\n```\n:::\n\n::: {.cell}\n```{webr}\ndataset |> \n  aggregate_Datetime(\"5 min\") |> \n  ggplot(aes(x=MEDI, y = after_stat(ncount))) +\n  geom_histogram(binwidth = 0.2) +\n  scale_x_continuous(trans = \"symlog\", \n                     breaks = c(0, 10^(0:5)), \n                     labels= expression(0,10^0,10^1, 10^2, 10^3, 10^4, 10^5)\n                     ) +\n  geom_vline(xintercept = c(282, 9, 33), col = \"red\") +\n  theme_minimal() +\n  # facet_wrap(~Id) +\n  labs(x = \"Melanopic illuminance (lx, mel EDI)\", y = \"Scaled counts (max = 1)\")\n```\n:::\n\n\n\n\nTo better characterize zero‑inflated, right‑skewed light data, use `log_zero_inflated()`. The function adds a small constant (ε) to every observation **before taking logs**, making the transform well‑defined at zero. Choose ε based on the device’s measurement resolution/accuracy; for wearables spanning roughly 1–10^5 lx, we recommend ε = 0.1 lx. The inverse, `exp_zero_inflated()`, returns values to the original scale by exponentiating and then subtracting the same ε. The default basis for these functions is 10.\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  ungroup() |> \n  summarize(\n    mean = mean(MEDI),\n    median = median(MEDI),\n    geo_mean =  exp(mean(log(MEDI[MEDI > 0]), na.rm = TRUE)),\n    log_zero_inflated_mean = \n      MEDI |> log_zero_inflated() |> mean() |> exp_zero_inflated()\n  )\n```\n:::\n\n::: {.cell}\n```{webr}\ndataset |> \n  aggregate_Datetime(\"5 min\") |> \n  ggplot(aes(x=MEDI, y = after_stat(ncount))) +\n  geom_histogram(binwidth = 0.2) +\n  scale_x_continuous(trans = \"symlog\", \n                     breaks = c(0, 10^(0:5)), \n                     labels= expression(0,10^0,10^1, 10^2, 10^3, 10^4, 10^5)\n                     ) +\n  geom_vline(xintercept = c(282, 9, 33, 7), col = \"red\") +\n  theme_minimal() +\n  # facet_wrap(~Id) +\n  labs(x = \"Melanopic illuminance (lx, mel EDI)\", y = \"Scaled counts (max = 1)\")\n```\n:::\n\n\n\n\n### Log zero-inflated with metrics\n\nWhen computing averaging metrics, apply the transformation **explicitly** to the variable you pass to the metric. This ensures the statistic is computed on the intended scale and makes your code easy to audit later. \n\nFor the zero‑inflated log approach, transform before averaging and (if desired) back‑transform for reporting:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset |> \n  summarize(\n    #without transformation:\n    untransformed = mean(MEDI),\n    #with transformation:\n    transformed = mean(log_zero_inflated(MEDI)),\n    .groups = \"drop_last\"\n            ) |> \n  mutate(backtransformed = exp_zero_inflated(transformed))\n```\n:::\n\n\n\n\n## Summaries\n\nSummary helpers provide fast, dataset‑wide overviews. Existing examples include `gap_table()` (tabular diagnostics) and `gg_overview()` (visual timeline). In the next release, two higher‑level tools are planned: `grand_overview()` (a dataset‑level summary plot) and `light_summary_table()` (a table of key exposure metrics). These are not available in `LightLogR 0.9.3` but are slated for an upcoming release and are shown in the next two sections as *sneak previews*. In keeping with `LightLogR`’s design, they will have straightforward interfaces and play well with grouped/tidy workflows.\n\n### Summary plot\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\ndataset |> \n  grand_overview(coordinates, #provide the coordinates\n                 \"Tübingen\", #provide a site name\n                 \"Germany\", #provide a country name\n                 \"#DDCC77\", #provide a color for the dataset\n                 photoperiod_sequence = 1 #specify the photoperiod resolution\n                 )\n```\n:::\n\n\n\n\n![To generate this figure yourself, please execute the [static R script](beginner.qmd)](assets/grand_overview.png)\n\n### Summary table\n\n\n\n\n::: {.cell}\n```{webr}\n#| eval: false\ndataset |> \nlight_summary_table(\n  coordinates, #provide coordinates\n  \"Tuebingen\", #provide a site name\n  \"Germany\", #provide a country name\n  \"#DDCC77\", #provide a color for histograms\n  histograms = TRUE #show histograms\n)\n```\n:::\n\n\n\n\n![To generate this table yourself, please execute the [static R script](beginner.qmd)](assets/table_summary.png)\n\n## Processing & states\n\n`LightLogR` contains many functions to manipulate, expand, or condense datasets. We will highlight the most important ones.\n\n### `aggregate_Datetime()`\n\n`aggregate_Datetime()` is a general‑purpose resampling utility that bins observations into fixed‑duration intervals and computes a summary statistic per bin. It is intentionally opinionated, providing sensible defaults (e.g., mean for numeric columns and mode for character/factor columns), but all summaries are configurable and additional metrics can be requested. Use it as a lightweight formatter to change the effective measurement interval after the fact (e.g., re‑epoching from 10 s to 1 min).\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n  dataset |> \n  aggregate_Datetime(\"1 hour\") |> #try to set different units: \"15 mins\", \"2 hours\",...\n  gg_days(aes_col = Id)\n```\n:::\n\n\n\n\n### `aggregate_Date()`\n\n`aggregate_Date()` is a companion function that collapses each group into a single 24‑hour profile, optionally re‑epoching the data in the process. It is well‑suited to very large datasets when you need an overview of the *average day*. It applies the same summarization rules as `aggregate_Datetime()` and is equally configurable to your requirements:\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 8\ndataset |> \n  aggregate_Date(unit = \"5 minutes\") |> \n  gg_days(aes_col = Id)\n```\n:::\n\n\n\n\n### `gg_doubleplot()`\n\n`aggregate_Date()` pairs well with `gg_doubleplot()`, which duplicates each day with an offset to reveal patterns that span midnight. While it can be applied to any dataset, use it on only a handful of days at a time to keep plots readable. If the dataset it is called on contains more than one day `gg_doubleplot()` defaults to displaying the next day instead of duplicating the same day.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 8\ndataset |> \n  aggregate_Date(unit = \"30 minutes\") |> \n  gg_doubleplot(aes_col = Id, aes_fill = Id)\n```\n:::\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 12\n# it is recommended to add photoperiod information after aggregating to the Date\n# level and prior to the doubleplot for best results.\ndataset |> \n  aggregate_Date(unit = \"30 minutes\") |> \n  add_photoperiod(coordinates, overwrite = TRUE) |>\n  gg_doubleplot(aes_fill = Id) |>\n  gg_photoperiod()\n```\n:::\n\n\n\n\n\n### Beyond inital variables\n\nBoth `aggregate_Datetime()` and `aggregate_Date()` allow for the calculation of additional metrics within their respective bins. One use case is to gauge the spread of the data within certain times. A simple approach is to plot the minimum and maximum value of a dataset that was condensed to a single day.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 8\ndataset |> \n  aggregate_Date(unit = \"30 minutes\",\n                 lower = min(MEDI), #create new variables...\n                 upper = max(MEDI)  #...as many as needed\n                 ) |> \n  gg_doubleplot(geom = \"blank\") + # use gg_doubleplot only as a canvas\n  geom_ribbon(aes(ymin = lower, ymax = upper, fill = Id), alpha = 0.5) +\n  geom_line()\n```\n:::\n\n\n\n\n### States\n\nStates, in the context of LightLogR, means any non-numeric variable. Those can be part of the dataset, be calculated from the dataset (e.g., mel EDI >= 250 lx), or added from an external source. We showcase some capabilities by dividing the dataset into sections by the Brown et al. (2022) recommendations for healthy lighting, using the `Brown_cut()` function.\n\n\n\n\n::: {.cell}\n```{webr}\ndataset_1day <- \ndataset |> \n  Brown_cut() |> #creating a column with the cuts\n  aggregate_Date(unit = \"30 minutes\", \n                 numeric.handler = median #note that we switched from mean to median\n                 ) |> \n  mutate(state = state |> fct_relevel(\"≥250lx\", \"≤10lx\", \"≤1lx\")) #order the levels\n```\n:::\n\n\n\n\n#### `gg_state()`\n\n`gg_state()` augments an existing plot by adding background rectangles that mark state intervals. When multiple states are present, map them to distinct fills (or colors) to improve readability.\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-height: 6\n#| fig-width: 8\n#| warning: false\ndataset_1day |> \n  gg_doubleplot(col = \"black\", alpha = 1, geom = \"line\") |>\n  gg_state(State.colname = state, aes_fill = state) +\n  labs(fill = \"Brown levels\")\n```\n:::\n\n\n\n\n### `durations()`\n\nIf you need a numeric summary of states, `durations()` computes the total time spent in each state per grouping (e.g., by `Id`, by day). With a small reshaping step, you can produce a tidy table showing the average duration each participant spends in each state:\n\n\n\n\n::: {.cell}\n```{webr}\ndataset_1day |> \n  group_by(state, .add = TRUE) |> #adding Brown states to the grouping\n  durations(MEDI) |> #calculating durations\n  ungroup() |>  #remove all grouping\n  mutate(state = fct_na_value_to_level(state, \"10-250lx\")) |> #name NA level\n  pivot_wider(id_cols = Id, names_from = state, values_from = duration) #reshape\n```\n:::\n\n\n\n\n### `extract_states()` & `summarize_numeric()`\n\nIf your interest in states centers on *individual occurrences* - for example, how often a state occurred, how long each episode persisted, or when episodes began - use the following tools. `extract_states()` returns an occurrence‑level table (one row per episode) with start/end times and durations; `summarize_numeric()` then aggregates those episodes into concise metrics (e.g., counts, total duration, mean/median episode length) by the grouping you specify.\n\n\n\n\n::: {.cell}\n```{webr}\ndataset_1day |> \n  extract_states(state) |> \n  summarize_numeric()\n```\n:::\n\n\n\n\n## It's a wrap\n\nThis concludes the first part of the `LightLogR` tutorial. We hope it has given you a nice introduction to the package and convinced you to try it out with your own data and in your local installation. For more on `LightLogR`, we recommend the [documentation page](https://tscnlab.github.io/LightLogR/). If you want to stay up to date with the development of the package, you can sign up to our [LightLogR mailing list](https://lists.lrz.de/mailman/listinfo/lightlogr-users).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}